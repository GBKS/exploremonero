@use '@/assets/css/variables.scss' as variables;

@mixin placeholder-color($color) {
    &:placeholder-shown {
        color: $color;
    }
    &::-webkit-input-placeholder {
        color: $color;
    }
    &::-moz-placeholder {
        color: $color;
    }
    &:-ms-input-placeholder {
        color: $color;
    }
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin overlayBackground() {
  position: absolute;
  left: 50%;
  top: 100%;
  transform: translate(-50%, 0);
  background-color: #ffffff;
  border-radius: 5px;
  z-index: 2;
  box-shadow: 0 50px 250px -30px rgba(black, 0.75);
}

@mixin fixedOverlayBackground() {
  position: fixed;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  background-color: #ffffff;
  border-radius: 5px;
  z-index: 2;
  box-shadow: 0 50px 250px -30px rgba(black, 0.75);
}

@mixin retina() {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    @content;
  }
}

// Media queries

@mixin media-query($media-query) {
  @if $media-query == small {
    @media only screen and (max-width:(variables.$small_width - 1)) {
      @content;
    }
  }

  @if $media-query == medium {
    @media only screen and (min-width:variables.$small_width) and (max-width:(variables.$large_width - 1)) {
      @content;
    }
  }

  @if $media-query == medium-up {
    @media only screen and (min-width:variables.$small_width) {
      @content;
    }
  }

  @if $media-query == medium-down {
    @media only screen and (max-width:(variables.$large_width - 1)) {
      @content;
    }
  }

  @if $media-query == large {
    @media only screen and (min-width:variables.$large_width) {
      @content;
    }
  }

  @if $media-query == medium-large {
    @media only screen and (min-width:variables.$small_width) and (max-width:(variables.$huge_width - 1)) {
      @content;
    }
  }

  @if $media-query == huge {
    @media only screen and (min-width:variables.$huge_width) {
      @content;
    }
  }
}